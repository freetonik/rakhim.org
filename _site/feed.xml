<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rakhim.org</title>
    <description>I'm Rakhim: a programmer, teacher, writer and podcaster.
</description>
    <link>http://localhost:4242/</link>
    <atom:link href="http://localhost:4242/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 05 Jul 2018 22:32:35 +0300</pubDate>
    <lastBuildDate>Thu, 05 Jul 2018 22:32:35 +0300</lastBuildDate>
    <generator>Jekyll v3.6.2</generator>
    
      <item>
        <title>Products aren't for people yet</title>
        <description>&lt;p&gt;Remember how your parents would try to use Windows 95 or something like Norton Commander. They’d copy an app shortcut to a floppy disk and be amazed how much stuff they were able to put inside. All the games, and lots of space left! And you’d think &lt;em&gt;they don’t understand anything at all&lt;/em&gt;, they are just clicking pretty much randomly, hoping this magic machine would at some point understand them and do the right thing. That was the time when &lt;strong&gt;programmers were building products for programmers&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;It wasn’t awesome, but it was sincere. Nobody was pretending that software was built for regular people, and the consensus was: in order to use a computer you have to learn something. Or know someone who can help.&lt;/p&gt;

&lt;p&gt;Today we’re living in times when &lt;strong&gt;programmers ~are building products for people~ believe that they’re building products for people&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This isn’t awesome and it’s not sincere. Today all of us regularly feel like our parents with Windows 95. You have to learn or, more commonly, just remember how to use a certain website or an app. And I’m not talking about small pieces of software, I’m mostly talking about huge, global products: Google’s user interfaces are chaos and madness, Facebook is madness and mess, Android is mess and vertigo. Trying to do something non-trivial, not the most basic thing reminds me of good old pixel-hunting quest games: What if I press here? Is it a button? Can I drag this? Oh, this is text, but it’s clickable, and this is a button, but it looks like a text…&lt;/p&gt;

&lt;p&gt;Using these interfaces on a daily basis feels like a dream to me. You know, like in a dream you’re trying to run, but it’s futile. And everything changes chaotically, and nothing makes sense. And it’s so nice when it rains, but sausages are going to burn. You know. Meanwhile, Google and Facebook are doing AB-tests: “hmm, if we make this button less button-y and move it to the left, more people would click it”. So we get an update to a bad UX.&lt;/p&gt;

&lt;p&gt;It’s hard to build painless products in general. But it’s especially hard for programmers to build painless products because in order to become a programmer we all had to endure suffering consistently. This is the unfortunate reality: you have to eat lots of shit to become a software developer. So we have a higher tolerance to UX pain, and this affects the way we design products and interfaces.&lt;/p&gt;

&lt;p&gt;I’m talking about our tools, of course: languages, libraries, frameworks. You’d like to get into the creative process and explore interesting problems and abstractions, but first, you have to deal with versions, dependencies, compatibility, bugs, updates, and other accidental complexity. This is a vicious circle because programming tools are created by programmers.&lt;/p&gt;

&lt;p&gt;Of course, we aren’t doing this because we love pain. Lots of progress is made all the time. Unfortunately, often, users pay for this progress. Architectural solutions based on programmer’s convenience affect end-user experience, design, and UI. My favorite example is Atom. A text editor. Still works with visible lag on an insanely powerful multi-core, multi-gigabyte machine. This text editor performs worse than one would 30 years before. Because &lt;a href=&quot;http://electron.atom.io/&quot;&gt;Electron&lt;/a&gt; is a nice development tool.&lt;/p&gt;

&lt;p&gt;Electron is not bad, the situation is bad. The situation where Electron is a good choice is pretty bad.&lt;/p&gt;

&lt;p&gt;We can say bad things about programmers, rant about how we can’t write code anymore, how frontend web developers are insane and npm is considered harmful. But it seems like on the macro level this is just a transition period. Some day we’ll get to the point where programmers would build products for people, and, hopefully, we’ll think of it as “&lt;strong&gt;people are building products for people&lt;/strong&gt;”.&lt;/p&gt;
</description>
        <pubDate>Sat, 04 Feb 2017 00:00:00 +0200</pubDate>
        <link>http://localhost:4242/2017/02/by_devs</link>
        <guid isPermaLink="true">http://localhost:4242/2017/02/by_devs</guid>
        
        
      </item>
    
      <item>
        <title>Justify when reducing user's freedom</title>
        <description>&lt;p&gt;Links should not forcefully open in a new tab because by enabling this the designer takes away some of the freedom from the user. Without &lt;code class=&quot;highlighter-rouge&quot;&gt;target=&quot;_blank&lt;/code&gt; the user has a choice: open here or in a new window. With &lt;code class=&quot;highlighter-rouge&quot;&gt;target=&quot;_blank&quot;&lt;/code&gt; the user has no choice.&lt;/p&gt;

&lt;p&gt;I will not add background music in my &lt;a href=&quot;https://soundcloud.com/hexlet&quot;&gt;podcasts&lt;/a&gt; because this would take away some of the freedom from the listener. They can add background music to the speech, but they can’t remove the music if it’s present in the source.&lt;/p&gt;

&lt;p&gt;Of course, some links require the new tab and some podcasts require music. This is not a rule about web interfaces or podcast production. It also doesn’t mean “allow as many options as possible”. This is just a reminder: &lt;strong&gt;if your idea reduces the user’s freedom, you have to justify it&lt;/strong&gt;.&lt;/p&gt;
</description>
        <pubDate>Thu, 19 Jan 2017 00:00:00 +0200</pubDate>
        <link>http://localhost:4242/2017/01/uf</link>
        <guid isPermaLink="true">http://localhost:4242/2017/01/uf</guid>
        
        
      </item>
    
      <item>
        <title>What is binary?</title>
        <description>&lt;p&gt;My attempt to explain binary numbers.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/binary.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 02 Dec 2016 00:00:00 +0200</pubDate>
        <link>http://localhost:4242/2016/12/binary</link>
        <guid isPermaLink="true">http://localhost:4242/2016/12/binary</guid>
        
        
      </item>
    
      <item>
        <title>Backups</title>
        <description>&lt;p&gt;I’m not going to try to convince you to backup data. I didn’t do backups for the most of my life, except for some photos and videos here and there. And those weren’t really backups, more like archives on external HDD’s.&lt;/p&gt;

&lt;p&gt;I use computers every day since, gosh, I guess 5th grade, and never ever did any hard drive fail on me. This is remarkable. Screens, keyboards, mice, even fans have died over the years, but not hard drives. Good old magnetic, noisy, spinning monsters.&lt;/p&gt;

&lt;p&gt;Backup evangelists love to say how “your HDD will fail, it’s inevitable”. Well, yes, it will fail inevitably as you use it for years, but the truth is — you’ll more likely switch computers before your drive fails.&lt;/p&gt;

&lt;p&gt;But the truth is, it’s extremely unlikely that you’ll ever need a backup. You’re probably good. I prefer to think about this stuff as an insurance. This is how you buy peace of mind. There are so few aspects of life where you can actually do that — pay some money (not much, too, which is great), and get some peace of mind. Medical insurance, for example, is sort of like that, but not really that good. With data backup, I can be pretty sure I will get everything back as it used to be, effectively travel back in time. Recovered data is precisely the same as lost data, so it’s not really lost anymore. While my body after medical treatment is not the same anymore.&lt;/p&gt;

&lt;p&gt;I’m not gonna go all “3-2-1 backup” on you. That’s the idea that in the perfect world you need at least 3 total copies of your data, 2 of which are local but on different devices, and at least 1 copy offsite. So, if all of your files are on your computer, then you need two external hard drives and a remote hard drive (maybe one at work, in another house or in the cloud). I don’t do that yet. For now my backup strategy looks like this:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Offsite backups with Arq (Dropbox and Amazon Cloud Drive)&lt;/li&gt;
  &lt;li&gt;Local backups with Time Machine and Carbon Copy Cloner&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/backup_strategy.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Most of the things I work on daily are on Github (personal and work), Dropbox (personal) and Google Drive (work).&lt;/p&gt;

&lt;p&gt;Let me first explain why I said no to Backblaze and Crashplan. Long story short: I don’t trust them.&lt;/p&gt;

&lt;h3 id=&quot;backblaze&quot;&gt;Backblaze&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.backblaze.com/&quot;&gt;Backblaze&lt;/a&gt; is a beautiful, sleek guy who says “don’t worry about it bro”. Mac client is minimal and cool, and it “just works”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/backblaze.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are few issues with Backblaze:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It’s not &lt;em&gt;really&lt;/em&gt; a backup solution. If you delete a file from your computer, then in one month it will also be deleted from Backblaze’s servers. It syncs stuff just like Dropbox does. This is why Dropbox in and of itself is not a proper backup solution.&lt;/li&gt;
  &lt;li&gt;If you backup an external drive and disconnect it from your computer, then Backblaze will delete that backup from their servers.&lt;/li&gt;
  &lt;li&gt;Backblaze doesn’t backup 100% of files. You can remove some exceptions manually, but some of them are built in. So, I can’t really have a complete copy of my boot disk, for example.&lt;/li&gt;
  &lt;li&gt;If you need to restore files from Backblaze, &lt;strong&gt;you’re gonna have a bad time&lt;/strong&gt;. Your options are: download a Zip-archive (if your file is 10 levels deep, then you’ll get all the upper level folder structure in the archive) or get a flash drive or a HDD via mail. You can’t restore files in place.&lt;/li&gt;
  &lt;li&gt;Some users say it’s very fast, some say it’s very slow. I can’t figure out the reasons, but for me it was dead slow. It took almost 120 hours (5 days) to upload less than 200G of data.&lt;/li&gt;
  &lt;li&gt;Android app seems to be made by a very intelligent puppy.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;crashplan&quot;&gt;Crashplan&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.crashplan.com/&quot;&gt;Crashplan&lt;/a&gt; is a douchey-looking guy in an expensive suit who says “the synergy is just overwhelming in this merger”. It took me a while to understand how it really works. It’s called CrashPlan Online Backup and it can backup, among other places, to your external hard drive. You know, because online.&lt;/p&gt;

&lt;p&gt;But once you get it, it’s pretty great in theory. With Crashplan you can backup to any local hard drive and offsite machine (like friend’s computer or any other machine in your network) for free, and with additional fees you can also backup to Crashplan’s cloud.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If you use their cloud, then it’s &lt;em&gt;really&lt;/em&gt; a backup solution. All your files are stored in the cloud forever&lt;sup&gt;*&lt;/sup&gt;. Unlike Backblaze.&lt;/li&gt;
  &lt;li&gt;You can restore any file to its original location or any other location. No need to download Zip-files from a cumbersome web interface.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;(* not forever)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Crashplan Mac app is… well… ugly like hell.&lt;/p&gt;

&lt;div style=&quot;text-align: center; margin-bottom: 1em;&quot;&gt;
&lt;img src=&quot;/images/posts/crashplan.png&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Look at this Java shit.&lt;/p&gt;

&lt;p&gt;I was happy with Crashplan for the first few days, and possibilities of adding more backup destinations if I decide to go all “3-2-1” was reassuring. But it turned out I can’t trust it.&lt;/p&gt;

&lt;p&gt;Crashplan, like any other software of that type, is supposed to work in the background, doing its thing while I do mine. I was restructuring files in my photo archives, moving files from folder to folder, renaming stuff. Nothing extreme. But in few days when Crashplan said it backed everything up, I tried to restore some files to check how it works. And it just lost the whole photos folder, tens gigabytes of photos. That was the folder I was fiddling with.&lt;/p&gt;

&lt;p&gt;I understand this is unfair. Trying to make a reliable copy of the file system while it changes is hard. But:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Should it fail, it must &lt;strong&gt;fail gracefully&lt;/strong&gt;. Losing all the files is unacceptable.&lt;/li&gt;
  &lt;li&gt;The end user should &lt;strong&gt;never worry&lt;/strong&gt; about this stuff. I wasn’t doing some crazy hacking, I just moved files around.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Oh, and Crashplan’s Android app seems to be made by a very intelligent puppy as well. Is there a software company ran by puppies I know nothing about?!&lt;/p&gt;

&lt;h3 id=&quot;arq&quot;&gt;Arq&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.arqbackup.com/&quot;&gt;Arq&lt;/a&gt; is only an app for your Mac or PC. It doesn’t offer any cloud backup storage itself. It’s not even a guy like Backblaze or Crashplan. It’s a faceless, soulless robot who says nothing. This is what backup software should be like.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/arq.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Arq can backup to Amazon Cloud Drive, AWS, Amazon Glacier, Google Drive, Google Cloud Drive, Dropbox, OneDrive, your SFTP server or NAS. You can set multiple sources and destinations. For example, I have the following setup:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Home folder → Dropbox&lt;/li&gt;
  &lt;li&gt;Photo archive → Dropbox and Amazon Cloud Drive&lt;/li&gt;
  &lt;li&gt;Podcasting archive → Dropbox&lt;/li&gt;
  &lt;li&gt;Current video projects → Dropbox and Amazon Cloud Drive&lt;/li&gt;
  &lt;li&gt;Work-related podcasting archive → Google Drive&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And at any point I can add other destinations, including a network attached storage.&lt;/p&gt;

&lt;p&gt;My Mac’s SSD is just 120G, but my Dropbox is 1TB. It’s great to finally make all that space useful by setting Dropbox as a destination for Arq. And &lt;a href=&quot;https://www.amazon.com/clouddrive/home&quot;&gt;Amazon Cloud Drive&lt;/a&gt; is just a great deal — unlimited storage for $60 per year. Of course, you have to remember, that it’s not really unlimited, and if you go crazy, Amazon is allowed to kick you out.&lt;/p&gt;

&lt;p&gt;Some cool features of Arq include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Local encryption&lt;/strong&gt;. Arq encrypts files before sending it, and sends it with SSL.&lt;/li&gt;
  &lt;li&gt;Backups are stored in &lt;strong&gt;open documented format&lt;/strong&gt;. Even if Arq dies and completely disappears, your encrypted data is safe and accessible.&lt;/li&gt;
  &lt;li&gt;A very nice and straight-forward &lt;strong&gt;native app&lt;/strong&gt; with some advanced features like CPU usage, upload rate, scheduling, data validation, budget restrictions (relevant for AWS, for example). You can also make Arq run shell scripts before and after backup sessions.&lt;/li&gt;
  &lt;li&gt;Arq truly backups everything. All the files, any format, any size (even crazy tens-of-gigs files) &lt;strong&gt;without restrictions&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Fixed price and no recurring fees.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/arq2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Arq also can &lt;a href=&quot;https://www.arqbackup.com/arq_help/pages/archiving.html&quot;&gt;archive&lt;/a&gt;: backup a folder, click “Detach…” and Arq will stop backing it up, but will store the previous backups indefinitely. This is great if you want to backup some external drives that rarely update.&lt;/p&gt;

&lt;h3 id=&quot;local-backups-time-machine-and-carbon-copy-cloner&quot;&gt;Local backups: Time Machine and Carbon Copy Cloner&lt;/h3&gt;

&lt;p&gt;My photos and work-related audio- and video-projects live on an external drive and are backed up to the cloud along with the home folder. The whole internal SSD gets only local backups, because it’s not that important. There are two things I need from this system:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Restore the system to a previous state. І never needed this with Macs, but I just feel safer this way when I upgrade the OS.&lt;/li&gt;
  &lt;li&gt;Boot from USB drive if internal drive fails. As I said, I didn’t have failing drives (neither HDD’s nor SSD’s) in my life, but SATA cables do fail sometimes. Should that happen, I can just boot from an external drive and continue working until the problem is solved.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Time Machine is good enough for quick restoration. I use &lt;a href=&quot;https://bombich.com/&quot;&gt;Carbon Copy Cloner&lt;/a&gt; to make an external bootable copy. Alternatively, &lt;a href=&quot;http://www.shirt-pocket.com/SuperDuper/SuperDuperDescription.html&quot;&gt;SuperDuper!&lt;/a&gt; is also nice. I like CCC more because it also copies the &lt;a href=&quot;https://bombich.com/kb/ccc4/cloning-apples-recovery-hd-partition&quot;&gt;recovery partition&lt;/a&gt;, which is used to reinstall macOS. You don’t &lt;strong&gt;really&lt;/strong&gt; need it, because all modern Macs come with a Network Recovery option.&lt;/p&gt;

&lt;p&gt;That’s it folks.&lt;/p&gt;

</description>
        <pubDate>Tue, 29 Nov 2016 00:00:00 +0200</pubDate>
        <link>http://localhost:4242/2016/11/backup</link>
        <guid isPermaLink="true">http://localhost:4242/2016/11/backup</guid>
        
        
      </item>
    
      <item>
        <title>Please, recommend me a book about X</title>
        <description>&lt;p&gt;In the past I spent hours asking people to recommend me some books, in both real life and on the internet. I was starting to learn programming, so obviously I wanted to find &lt;strong&gt;The Bible&lt;/strong&gt;, the best book for each of the aspects of coding. &lt;em&gt;What is the best book about algorithms? Can you please recommend a book about Java? I’m looking for a good book that’ll teach me Django. Any suggestions?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When online courses and videos became widespread, I remember asking similar questions about courses and screencasts. Today our community at Hexlet.io is pretty big, and questions like this appear in our chats, social media, forums and blogs every day.&lt;/p&gt;

&lt;p&gt;Of course, there are objectively good resources and not too good ones. “C Programming Language” is a great book, even if you don’t plan to program in C (let’s be honest — you probably don’t). O’Reilly books are usually pretty good. SICP is a must-read. Right.&lt;/p&gt;

&lt;p&gt;But the thing is, if you go ahead and ask this question publicly, say, on Reddit or HackerNews, you’ll get plenty of answers. You probably won’t have a definitive answer in the end. Same if you just Google this question: many compelling answers, and you still have to decide.&lt;/p&gt;

&lt;p&gt;The thing is — there is no Bible. No silver bullet. And if hundreds of people recommend a particular book, it only means there are higher than usual chances of that book working for you. It might not work for you at all, and that’s fine.&lt;/p&gt;

&lt;p&gt;If you’re serious about learning something, you gotta take in plenty of information, read multiple books, listen to many people, watch lots of videos. Some of them will be subjectively bad, some — good. They will work together and help you understand ideas from different perspectives.&lt;/p&gt;

&lt;p&gt;Think of this like trying to create a 3D model of an object. One book, one author, one approach is like taking one photo of that object. You get a lot of information (compared to nothing), but creating a good 3D model from a single 2D photo is hard, especially if this object is new, unknown and unexpected. You need at least few other photos, from different angles. Some photos will be so detailed and awesome, that they’ll contribute more than several other photos combined. This quality, level of contribution to the overall result is determined by compatibility between the photo and you. Your sensors, your brain, understands certain photos better than the others.&lt;/p&gt;

&lt;p&gt;At some point you’ll get enough, so that new photos won’t make much of a difference anymore. There’ll be a point when you open another book and just don’t get anything new from it. This is how you know you got somewhere.&lt;/p&gt;

&lt;p&gt;So, yeah, take some recommendations from people you trust, or just go ahead and get most upvoted books and resources along with some random picks. &lt;strong&gt;Nobody knows what is good for you&lt;/strong&gt;. And only one person &lt;strong&gt;can&lt;/strong&gt; know.&lt;/p&gt;

&lt;p&gt;The best general advice, I guess, is to put some effort into knowing &lt;strong&gt;yourself&lt;/strong&gt; first. Try to figure out what works better for &lt;em&gt;you&lt;/em&gt;, that’s the only person who matters when it comes to education. Some people get the best results from thick, serious textbooks, some — from humorous, illustrated blogs, others — from videos. There is a guy who says “video is the worst medium for computer science education!” and gets hundreds of upvotes on Reddit? Well, who cares? Jacob from Wisconsin learns better with books and doesn’t get much from videos. Great, now what? This fact is useless to me, I want to know what works for me.&lt;/p&gt;

&lt;p&gt;This is not “we’re all unique snow-flakes” type of bullshit. You are not unique, there are lots of people with very similar mindsets and mental structures when it comes to learning stuff. That’s not the point. The point is — unless you actively learn about yourself, you won’t know which non-unique group you belong to. Being unique or not is irrelevant.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;— What is the best way to learn X?&lt;br /&gt;
— Know yourself first, then try whatever.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Thu, 24 Nov 2016 00:00:00 +0200</pubDate>
        <link>http://localhost:4242/2016/11/books</link>
        <guid isPermaLink="true">http://localhost:4242/2016/11/books</guid>
        
        
      </item>
    
      <item>
        <title>What am I doing</title>
        <description>&lt;p&gt;There is a popular anecdote in the frog community. Especially older, wiser frogs love to tell to it to younger frogs. It goes something like this: once there was a man who worked at work and ate at diners, and all seemed fine enough to him, and over the years things in his life were constantly changing for the worst, but he didn’t really notice and didn’t make decisions to fix this trend. Today always seemed not too bad compared to yesterday. A year ago was hard to recall, so he didn’t bother. He died being an unhappy, grumpy, miserable man. The end.&lt;/p&gt;

&lt;p&gt;The boiling frog anecdote is considered extremely offensive in the frog community.&lt;/p&gt;

&lt;p&gt;Metaphorical tales are fun and all, but I find them very unhelpful at times. If you’re stuck somewhere in life and need a push, a boiling frog analogy won’t wake you up. The whole problem is in not seeing stuff clearly, and another perspective just makes you not see stuff clearly from another perspective.&lt;/p&gt;

&lt;p&gt;So, instead, think of an unhappy, grumpy, miserable old man regretting his lack of decisions.&lt;/p&gt;

&lt;p&gt;The frog is fine.&lt;/p&gt;
</description>
        <pubDate>Sun, 30 Oct 2016 00:00:00 +0300</pubDate>
        <link>http://localhost:4242/2016/10/what</link>
        <guid isPermaLink="true">http://localhost:4242/2016/10/what</guid>
        
        
      </item>
    
      <item>
        <title>Dreaming of obsession</title>
        <description>&lt;p&gt;When I was a kid, everyone around me was obsessed with something. For some it was football, for others — cars, video games or some martial art like karate. And I was jealous. I couldn’t get obsessed, I was trying to, but couldn’t.&lt;/p&gt;

&lt;p&gt;I didn’t have doubts that I’ll become obsessed with video games as soon as I get a gaming console. My parents got me a NES (actually, a Chinese NES clone called “Dendy” that were extremely popular in exUSSR in the 90-s), but instead of a real obsession I got obsessed with the idea of obsession.&lt;/p&gt;

&lt;p&gt;I didn’t finish a single game, I didn’t play much in general, but diligently filled thick notebooks with cheat codes, maps of levels and best paths to clear them. I spent hours exploring the cartridges at all gaming stores in the town, compiling tables of comparison to help me decide what to buy. I guess, I was obsessed with something — the infrastructure, the things that surrounded the games. I was simulating the video games obsession.&lt;/p&gt;

&lt;p&gt;In high school I was jealous with football fans. They always had something to fill their time: they discussed endless games and championships, played football-related computer games, exchanged cards and posters, read newspapers and magazines. I was jealous just like I was before. I forced myself into watching football games, simulated emotions, got myself into senseless arguments, bought newspapers and read the news. Of course, it didn’t work, I got upset and carried on being jealous.&lt;/p&gt;

&lt;p&gt;I am unable to be obsessed. And it took more than 20 years to realize I actually am very lucky.&lt;/p&gt;
</description>
        <pubDate>Tue, 23 Dec 2014 00:00:00 +0200</pubDate>
        <link>http://localhost:4242/2014/12/obsession</link>
        <guid isPermaLink="true">http://localhost:4242/2014/12/obsession</guid>
        
        
      </item>
    
      <item>
        <title>How to evaluate personal growth</title>
        <description>&lt;p&gt;&lt;em&gt;Note: I don’t differentiate between personal and professional growth in this essay. Professional is considered a subset of personal.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;New Year is upon us, and along with resolutions for 2015 many of us try to take a look at 2014 and find some promising changes. Did I become a better entrepreneur? Am I smarter than before? Am I going in the right direction? Do I even know what direction to go?&lt;/p&gt;

&lt;p&gt;It can be hard to evaluate personal growth, but it’s very important to get some idea about it regularly. Seeing that you’re getting better is a huge motivation boost.&lt;/p&gt;

&lt;p&gt;It’s easier with measurable things, for example, with programming. A year ago I didn’t know Ruby on Rails, today I can build simple things with it. Several months ago I’d spend days setting up the working environment, today I have made automation tools to deal with it in minutes.&lt;/p&gt;

&lt;p&gt;Back in the university it was also pretty comfortable: I got marks and I could see if I’m getting better. I could also measure the time needed to complete assignments. Working for someone is another position where you have delegated some part of the evaluation to a trusted party: your boss, your team or your clients. Getting a bonus or a raise or just a positive comment gives you some idea.
Since January 2014 I’m working on my startup. There are of course measurable things there too: sales, clients, feedback. Just like in school or at work they measure the outcome, and you can get some idea of what it took to get there. But being an entrepreneur (god, I still feel so sketchy saying that), it’s a bit different.&lt;/p&gt;

&lt;p&gt;Working as a software developer for some company, you have some tasks, some context and some defined goals. There is a relatively small set of skills you use and assess. Mainly, programming, communication, learning, teaching. So, if you meet all the deadlines, keep your team and clients happy and learn and adopt new things — seems like those skills are getting stronger. In other words, you are able to connect the outcome with your actions and skills.&lt;/p&gt;

&lt;p&gt;The difference you’d feel as an entrepreneur in a startup is that the number of skills and actions is larger. Not that entrepreneurs are better than developers! Au contraire, they are worse: they don’t have a chance to focus on a single thing for long periods of time, they have to deal with lots of things, using different skills, but still have the same number of hours in a day as everyone else.&lt;/p&gt;

&lt;p&gt;As a result, when your startup, say, gets more sales, you can’t always clearly see the path from actions and skills to this outcome. Yes, you can see the feature your team completed to get there, but that’s not deep enough.&lt;/p&gt;

&lt;p&gt;It gets worse: sometimes the path isn’t there at all. Maybe, you had nothing to do with this increase in sales. Or maybe “nothing” is exactly what you did: sales increased because you didn’t do what you wanted, didn’t get in the way.&lt;/p&gt;

&lt;p&gt;Startups are about learning, but measuring learning is hard.
How your actions and skills affect the overall business is a topic for another discussion, let’s get back to personal growth. So, it’s the end of the year, there’s definitely been some progress over the months, but did I become better? It is very possible that I didn’t grow at all — my team did, my co-founder did, but not me.&lt;/p&gt;

&lt;p&gt;Maybe, one way to tackle this is to imagine you-from-the-past dealing with today’s issues. But that’s impossible, unfortunately. That person is gone, you’ll never have access to your past, unless they invent a time machine. But even if they do, and you go there and ask you-in-the-past “what would you do in this situation?”, and get an answer (along with “what the hell, who are you?!”), what next? How to determine if your present answer is better and if it shows your superiority?
But fear not, there is a way to evaluate personal growth! It’s called…
embarrassment.&lt;/p&gt;

&lt;p&gt;About 12 months ago I was convinced I have to spend weeks writing a huge project description and business plan, then hire 5 best developers and designers I can find, work for several months and release this awesome, successful and fantastic product everybody would love. If you’re into startups you know this is a bad bad idea. I know it now, and I feel embarrassed about considering that a year ago. Did I become better in thinking about startups? I’m pretty sure I did.&lt;/p&gt;

&lt;p&gt;The best way to preserve this embarrassment material is to keep a diary. Write about your ideas, actions and thoughts every day, and review them in the future. Of course, if you’re embarrassed by everything you do in the past — that’s a bad sign. But if you have nothing — that’s even worse.
So, hopefully, a year from now I will feel embarrassed about some of my current ideas and actions. The hard part is to accept the idea that you’re never perfect, you’re never the best. The idea is not to be the best, it is to be better.&lt;/p&gt;
</description>
        <pubDate>Sun, 14 Dec 2014 00:00:00 +0200</pubDate>
        <link>http://localhost:4242/2014/12/how_to_evaluate_personal_growth</link>
        <guid isPermaLink="true">http://localhost:4242/2014/12/how_to_evaluate_personal_growth</guid>
        
        
        <category>Articles</category>
        
      </item>
    
  </channel>
</rss>
